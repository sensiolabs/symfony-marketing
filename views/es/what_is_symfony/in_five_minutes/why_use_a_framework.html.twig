{% block title 'Why should I use a framework?' %}
{% block keywords '' %}
{% block description 'What is Symfony - Start here if you want a brief explanation' %}

{% block intro %}
    <p>
        A framework is not absolutely necessary: it is “just” one of the tools that is available
        to help you develop better and faster!
        <br />
        Better, because a framework provides you with the certainty that you are developing an
        application that is in full compliance with the business rules, that is structured, and
        that is both maintainable and upgradable.
        <br />
        Faster, because it allows developers to save time by re-using generic modules in order
        to focus on other areas.  Without, however, ever being tied to the framework itself.
    </p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">Investing in the task, not in the technology</h2>
    <p>
        This is the basic principle of a framework: Not having to reinvent the wheel.
        And doing away with foreboding, low value added tasks (for example, the development
        of generic components) in order to fully focus on the business rules.
    </p>
    <p>
        As an example, a framework will keep the developer from having to spend 2 or 3
        days creating an authentication form (which is not a specific task). The time
        that is saved can be dedicated to more specific components as well as to the
        corresponding unit tests; giving you solid, sustainable and high quality code.
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">Guaranteed upgradability and maintenance</h2>
    <p>
        In the longer term, a framework ensures the longevity of your applications.
        If a development team works as they please, only that particular team will
        be able to maintain and upgrade the application with ease.  The way that a
        publisher supports a proprietary solution.
    </p>
    <p>
        On the other hand, the structure that a framework provides for the application
        makes it possible to avoid this pitfall alltogether and it gives any developer
        - whether she participated in its development or not – the ability to easily
        “adopt” an application, to maintain it over time and to upgrade it both
        quickly and neatly, whenever necessary.
    </p>
    <p>
        In this regard, a framework is not a black box!  In the case of Symfony,
        it is still PHP…  The applications that are developed are not limited to
        the Symfony universe, and they are
        <a href="{{ marketing_path('six_good_reasons') }}#interoperable">natively interoperable</a>
        with any other PHP library, for example.
    </p>
{% endblock %}

{% block summary %}
    <p>A framework is not an absolute necessity, but nonetheless it is very useful.</p>
    <p>A framework is a pledge of quality, upgradability and maintainability of applications at lower cost.</p>
    <p>Applications developed using a framework are interoperable with market standards.</p>
{% endblock %}
