{% block title 'Symfony explained to my Boss' %}
{% block keywords '' %}
{% block description '' %}

{% block intro %}
    <p>Symfony 2 is a PHP framework - a framework to develop websites or applications written in PHP.</p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">Symfony vs. CMS and packaged software</h2>
    <p>
        A framework, a CMS (Content Management System), and a packaged
        solution do not meet the same needs or require the same investment
        and/or the same expertise.
    </p>
    <p>
        With <strong>packaged software</strong>, it's simple: aside from
        changing a few parameters, businesses must be content with the
        available features, which may be more limited that the initially
        defined needs; or the opposite, far too large in number. Aside
        from integrating it into the current information system, selecting
        packaged software requires very little technical expertise.
    </p>
    <p>
        A <strong>CMS</strong> and its add-on modules can be used to
        design websites and applications that are fairly close to
        businesses' needs, as long as the required modules are available
        and maintained!
    </p>
    <p>
        A <strong>framework</strong> offers all the flexibility of custom
        development and can be used to design an application that
        perfectly meets the expressed needs. It, however, requires
        development, integration and maintenance related technical
        expertise.
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">Symfony: Development tools</h2>
    <p>
        Whether it is handwritten or developed using a framework, a PHP
        application is a PHP application. And in both cases it requires
        technical expertise. Nevertheless, the presence of a framework
        guarantees that an application complies with industry rules, is
        well structured, maintainable and scalable. It also saves
        developers time, by reusing generic modules, so they can focus on
        specific business features.
    </p>
{% endblock %}

{# ============================ #}
{# French Translation           #}
{# ============================ #}
{#
{% block title 'Symfony expliqué à mon patron' %}
{% block keywords '' %}
{% block description '' %}

{% block intro %}
    <p>Symfony 2 est un framework PHP - un cadre pour développer des sites Web ou des applications écrites en PHP.</p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">Symfony vs CMS et les solutions clé en main</h2>
    <p>
        Un framework, un CMS (Content Management System ou Système de gestion de contenus), et une solution clé en main ne répondent pas aux mêmes besoins ou n'exigent pas le même investissement et / ou la même expertise.
    </p>
    <p>
        Avec <strong>les solutions clé en main</strong>, c'est simple: en dehors de changer quelques paramètres, les entreprises doivent se contenter de fonctionnalités disponibles, qui peuvent être plus limitées que les besoins définis au départ, ou au contraire, beaucoup trop grandes en nombres. Mis à part son intégration dans en projet déjà existant, la sélection des solutions clé en main nécessite très peu d'expertise technique.
    </p>
    <p>
        Un <strong>CMS</strong> et ses modules additionnels peuvent être utilisés pour concevoir des sites Web et des applications qui sont assez près des besoins des entreprises, tant que les modules nécessaires sont disponibles et entretenus!
    </p>
    <p>
        Un <strong>framework</strong> offre toute la souplesse du développement sur mesure et peut être utilisé pour concevoir graphiquement une application qui répond parfaitement aux besoins exprimés. Cependant, il nécessite une connaissance technique avancé pour le développement, l'intégration et la maintenance.
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">Symfony: Outils de développement</h2>
    <p>
        Que ce soit écrit à la main ou développé en utilisant un framework, une application PHP est une application PHP. Et dans les deux cas, il nécessite une expertise technique. Néanmoins, la présence d'un framework garantit que la demande du client sera conforme aux règles de développement, bien structurée, maintenable et évolutive. Il permet aussi de faire gagner du temps aux développeurs, par la réutilisation des modules génériques, de sorte qu'ils puissent se concentrer sur les caractéristiques spécifiques de chaque projet.
    </p>
{% endblock %}
#}
